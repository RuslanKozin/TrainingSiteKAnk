<?php

function html($text) {
    return htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
}

function htmlout($text) {
    echo html($text);
}

function markdowm2html($text) {
    $text = html($text);

    /*........................ Полужирное начертание ....................*/
    $text = preg_replace('/__(.+?)__ /s', '<strong>$l</strong>', $text);    //двойное нижнее подчеркивание
    $text = preg_replace('/\*\*(.+?)\*\*/s', '<strong>$l</strong>', $text);   //Двойные звездочки (экранируем)
    /*...................................................................*/

    /*............................ Курсив ...............................*/
    $text = preg_replace('/_([^_]+)_/', '<em>$l</em>', $text);  // одинарное нижнее подчеркивание
    $text = preg_replace('/\*([^\*]+)\*/', '<em>$l</em>', $text); // Звездочки (экранируем - обратный слеш перед звездочкой)
    /*...................................................................*/

    /*...................... Абзацы и Разрывы строк ......................*/
    // Преобразуем стиль Windows (\r\n) в Unix (\n).
    $text = str_replace("\r\n", "\n", $text);
    // Преобразуем стиль Macintosh (\r) в Unix (\n).
    $text = str_replace("\r", "\n", $text);
    // Абзацы
    $text = '<p>' . str_replace("\n\n", '</p><p>', $text) . '</p>';
    // Разрывы строк
    $text = str_replace("\n", '<br>', $text);
        /*Функция str_replace, не нужно придерживаться строгих правил, которые действуют для регулярных выражений.
        Именно поэтому там, где это возможно, нужно применять ее или ее разновидность str_ireplace (для поиска
        с учетом регистра) вместо preg_replace.*/

    //      [Текст ссылки] (адрес URL)
    $text = preg_replace(
        '/\[([^\]]+)]\(([-a-z0-9._~:\/?#@!$&\'()*+,;=%]+)\)/i',
        '<a href="$2">$l</a>', $text);
    /*...................................................................*/
    return $text;

    // Функция markdownout вызывает  markdown2html и выводит результат
    function markdownout($text){
        echo markdowm2html($text);
    }
}
    /*
            КУРСИВ
  1.  /_([^_]+)_/ (Используется нижнее подчеркивание)- Разберем выражение:
        / - начало регулярного выражения.
        _ - символ, не имеющий особого значения, используется для обозначения начала курсивного текста.
        ( - скобка, создает группу совпавших символов.
        [^_] -  последовательность из одного или нескольких символов, не являющихся символами подчеркивания.
        + -
        ) - скобка, создает группу совпавших символов.
        _ - еще один символ подчеркивания, обозначает конец крусивного текста.
        / - конец регулярного выражения.

  2.  /\*([^\*]+)\*/     /*(Используется звездочки) - Шаблон для сопоставления и замены пар звездочек(Звездочки имеют
        особое значение в контексте регулярных выражения, поэтому их следует экранировать с помощью обратного слеша)

            ПОЛУЖИРНОЕ НАЧЕРТАНИЕ
        /__(.+?)__/s - двойное нижнее подчеркивание
    //.........................................................................................................

     // .............................. Абзацы и разрывы строк ...................................

     //Преобразуем стиль Windows (\r\n) в Unix (\n).
     $text = preg_replace('/\r\n/', "\n", $text);
     //Преобразуем стиль Macintosh (\r) в Unix (\n).
     $text = preg_replace('/\r/', "\n", $text);

     //Абзацы
     $text = '<p>' . preg_replace('/\n\n/', '</p><p>', $text) . '</p>';
     //Разрывы строки
     $text = preg_replace('/\n/', '<br>', $text);
    //...........................................................................................

    //...................................... Гиперссылки ........................................
        /\[([^\]]+)]\(([-a-zO-9._~:\/?#@!$&'()*+,;=%]+)\)/i  - Разберем выражение

        / - начало регулярного выражения.
        \[ - открывающая квадратная скобка. (экранируется обратным слешем для правильной интерпретации)
        ([^\]]+) - круглые скобки означают, то текст, совпавший с заключенным в них фрагментом, доступен в
                    строке-заменителе в переменной $1.
                    Внутри скобок ищется текст ссылки.
                    Еще одна закрывающая квадратная скобка говорит о том, что текст включает один или несколько
                    символов, не являющихся закрывающей квадратной скобкой.
        ]\( - закрывающая квадратная скобка обозначает завершение текста ссылки, следующая за ней
                    открывающая круглая скобка сигнализирует о начале адреса URL.
                    Поскольку круглая скобка не используется для обозначения группы, ее следует экранировать с
                    помощью обратного слеша. Для квадратной скобки в этом нет необходимости, потому что
                    в данном выражении у нее нет неэкранированной пары.
        ([-a-z0-9._~:\/?#@!$&'()*+,;=%]+) - круглые скобки говорят о том, что текст, совпавший с заключенным
                    в нимх фрагментом, доступен в строке-заменителе переменной $2.
                    Фрагмент внутри скобок представляет адрес URL. Квадратные скобки содержат набор символов,
                    которые могут входить в состав URL, а следующий за ними + сигнализирует о том, что таких
                    символов должно быть не меньше одного.
                    Многие специальные символы (.,?,+,*,(и)) внутри квадратных скобок теряют свое особое значение,
                    поэтому экранировать их не нужно. Единственное исключение - слеш (/). Чтобы он не воспринимался
                    как разделитель, закрывающий регулярное выражение, его следует записать в виде \/.
                    Дефис - в списке символов идет в самом начале, иначе он станет обозначать диапазон символов,
                    как в выражениях a-z и 0-9.
        \) - экранированная закрывающая круглая скобка в конце адреса ссылки.
        /i - конец регулрного выражения, за которым следует модификатор i, сигнализирующий о нечувствительности к регистру.
    //...........................................................................................
    */